package fasper.gm;

import java.io.*;
import java.util.*;

import fasper.*;
import fasper.base.*;
import antlr.collections.*;

/**
 * Test activation class.
 * This class is responsible for :<br>
 * - parse the test file (aka z-file)<br>
 * - retrieve the expectedAST<br>
 * - retrieve an ActivationDescriptor for the parser under test<br>
 * Next error codes are added : <br>
 * - <b>GMLexer_FAILED</b> = unable to create the GMLexer<br>
 * - <b>GMParser_FAILED</b> = unable to create the GMParser<br>
 * - <b>GMParser_Start_FAILED</b> = unable to apply 
 * <code>GMParser.start()</code> rule<br>
 * - <b>GMFile_NOT_FOUND</b> = can not find the test file<br>
 * @see fasper.base.TestActivation
 * @see fasper.FasperException
 * @author stefan@amiq.ro
 */
public class GMActivation implements TestActivation {
   private GMParser parser = null;
   private File gmFile = null;
   static {
      FasperException.addErrorCode("GMLexer_FAILED");
      FasperException.addErrorCode("GMParser_FAILED");
      FasperException.addErrorCode("GMParser_Start_FAILED");
      FasperException.addErrorCode("GMFile_NOT_FOUND");
   }

   /**
    * Creates a new GMActivation using a File object.
    * @param _file Represents the test file (aka z-file)
    */
   public GMActivation (File _file) {
      this.gmFile = _file;
   }

   /**
    * Creates a new GMActivation using a file name/path.
    * @param _file Represents the name/path of the file to be loaded
    */
   public GMActivation (String _file) {
      this.gmFile = new File(_file);
   }
   
   /**
    * Activates the test.
    * Test activation consists of : <br>
    * - creates GMLexer<br>
    * - creates GMParser<br>
    * - applies <code>GMParser.start()</code><br>
    * @exception FasperException is thrown because of one of the causes presented 
    * above. 
    * @see fasper.base.TestActivation
    */
   public void activate() throws Throwable {
      String _context = "";
      try {
         _context = "GMLexer_FAILED";
         GMLexer _lexer = new GMLexer(gmFile);
         _context = "GMParser_FAILED";
         parser = new GMParser(_lexer);
         _context = "GMParser_Start_FAILED";
         parser.start();
      } catch(FileNotFoundException _fnfe) {
         throw new FasperException("GMFile_NOT_FOUND"
            ,"Can not find GM file : " + gmFile.getAbsolutePath());
      } catch (Exception _exc) {
         throw new FasperException(_context
            ,"Could not activate due to " + _exc.toString()
            , _exc);
      }
   }
   
   /**
    * Returns the expected AST. 
    * In case an error occured during test-file parsing, returns <code>null</code>.
    * @return Returns the expected AST.
    */
   public AST getParserAST() {
      if ( parser != null )
         return parser.getExpectedAST();
      return null;
   }

   /**
    * Returns the expected AST. 
    * In case an error occured during test-file parsing, returns <code>null</code>.
    * @return Returns the expected AST.
    */
   public AST getTreeParserAST() {
      if ( parser != null )
         return parser.getExpectedAST();
      return null;
   }

   /**
    * Returns the a map similar to the one in *TokenTypes.txt.
    * The token map can be obtained in two ways:<br>
    * - in test parser, while loading the test (@see fasper.gm.GMParser)<br>
    * - by reading a *TokenTypes.txt mapping file, which is automatically 
    * generated by antlr.<br>
    * This mapping is important in comparision process.
    * @return Returns a mapping between token type and it's 
    * string equivalent.
    * @see fasper.DefaultASTComparator
    */
   public HashMap getTokenMap() {
      if (parser != null)
         return parser.getTokenMap();
      return new HashMap();
   }

   /**
    * Returns the ActivationDescriptor of parser under test.
    * @return Returns the activation descriptor of the parser under test.
    */
   public ActivationDescriptor getPADescriptor() {
      return new ActivationDescriptor(
      parser.getActivationClassName()
      , parser.getArgTypes()
      , parser.getArgValues());
   }
   
   /**
    * Returns the current loaded file.
    * @return Returns the current loaded file.
    */
   public File getGmFile() {
      return gmFile;
   }
   
   public ArrayList getAllErrors() {
      return new ArrayList(0);
   }
}


